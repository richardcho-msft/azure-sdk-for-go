//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.0, generator: @autorest/go@4.0.0-preview.43)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package generated

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

type ServerCallingClient struct {
	endpoint string
	pl runtime.Pipeline
}

// NewServerCallingClient creates a new instance of ServerCallingClient with the specified values.
// endpoint - The endpoint of the Azure Communication resource.
// pl - the pipeline used for sending requests and handling responses.
func NewServerCallingClient(endpoint string, pl runtime.Pipeline) *ServerCallingClient {
	client := &ServerCallingClient{
		endpoint: endpoint,
		pl: pl,
	}
	return client
}

// AnswerCall - Answer a call using the IncomingCallContext from Event Grid.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// answerCallRequest - The answer call request.
// options - ServerCallingClientAnswerCallOptions contains the optional parameters for the ServerCallingClient.AnswerCall
// method.
func (client *ServerCallingClient) AnswerCall(ctx context.Context, answerCallRequest AnswerCallRequest, options *ServerCallingClientAnswerCallOptions) (ServerCallingClientAnswerCallResponse, error) {
	req, err := client.answerCallCreateRequest(ctx, answerCallRequest, options)
	if err != nil {
		return ServerCallingClientAnswerCallResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ServerCallingClientAnswerCallResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ServerCallingClientAnswerCallResponse{}, runtime.NewResponseError(resp)
	}
	return client.answerCallHandleResponse(resp)
}

// answerCallCreateRequest creates the AnswerCall request.
func (client *ServerCallingClient) answerCallCreateRequest(ctx context.Context, answerCallRequest AnswerCallRequest, options *ServerCallingClientAnswerCallOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections:answer"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, answerCallRequest)
}

// answerCallHandleResponse handles the AnswerCall response.
func (client *ServerCallingClient) answerCallHandleResponse(resp *http.Response) (ServerCallingClientAnswerCallResponse, error) {
	result := ServerCallingClientAnswerCallResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CallConnectionPropertiesDto); err != nil {
		return ServerCallingClientAnswerCallResponse{}, err
	}
	return result, nil
}

// CreateCall - Create an outbound call.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// body - The create call request.
// options - ServerCallingClientCreateCallOptions contains the optional parameters for the ServerCallingClient.CreateCall
// method.
func (client *ServerCallingClient) CreateCall(ctx context.Context, body CreateCallRequest, options *ServerCallingClientCreateCallOptions) (ServerCallingClientCreateCallResponse, error) {
	req, err := client.createCallCreateRequest(ctx, body, options)
	if err != nil {
		return ServerCallingClientCreateCallResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ServerCallingClientCreateCallResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return ServerCallingClientCreateCallResponse{}, runtime.NewResponseError(resp)
	}
	return client.createCallHandleResponse(resp)
}

// createCallCreateRequest creates the CreateCall request.
func (client *ServerCallingClient) createCallCreateRequest(ctx context.Context, body CreateCallRequest, options *ServerCallingClientCreateCallOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// createCallHandleResponse handles the CreateCall response.
func (client *ServerCallingClient) createCallHandleResponse(resp *http.Response) (ServerCallingClientCreateCallResponse, error) {
	result := ServerCallingClientCreateCallResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CallConnectionPropertiesDto); err != nil {
		return ServerCallingClientCreateCallResponse{}, err
	}
	return result, nil
}

// RedirectCall - Redirect a call.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// options - ServerCallingClientRedirectCallOptions contains the optional parameters for the ServerCallingClient.RedirectCall
// method.
func (client *ServerCallingClient) RedirectCall(ctx context.Context, redirectCallRequest RedirectCallRequest, options *ServerCallingClientRedirectCallOptions) (ServerCallingClientRedirectCallResponse, error) {
	req, err := client.redirectCallCreateRequest(ctx, redirectCallRequest, options)
	if err != nil {
		return ServerCallingClientRedirectCallResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ServerCallingClientRedirectCallResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return ServerCallingClientRedirectCallResponse{}, runtime.NewResponseError(resp)
	}
	return ServerCallingClientRedirectCallResponse{}, nil
}

// redirectCallCreateRequest creates the RedirectCall request.
func (client *ServerCallingClient) redirectCallCreateRequest(ctx context.Context, redirectCallRequest RedirectCallRequest, options *ServerCallingClientRedirectCallOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections:redirect"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, runtime.MarshalAsJSON(req, redirectCallRequest)
}

// RejectCall - Reject the call.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// rejectCallRequest - The reject call request.
// options - ServerCallingClientRejectCallOptions contains the optional parameters for the ServerCallingClient.RejectCall
// method.
func (client *ServerCallingClient) RejectCall(ctx context.Context, rejectCallRequest RejectCallRequest, options *ServerCallingClientRejectCallOptions) (ServerCallingClientRejectCallResponse, error) {
	req, err := client.rejectCallCreateRequest(ctx, rejectCallRequest, options)
	if err != nil {
		return ServerCallingClientRejectCallResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ServerCallingClientRejectCallResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return ServerCallingClientRejectCallResponse{}, runtime.NewResponseError(resp)
	}
	return ServerCallingClientRejectCallResponse{}, nil
}

// rejectCallCreateRequest creates the RejectCall request.
func (client *ServerCallingClient) rejectCallCreateRequest(ctx context.Context, rejectCallRequest RejectCallRequest, options *ServerCallingClientRejectCallOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections:reject"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, runtime.MarshalAsJSON(req, rejectCallRequest)
}

