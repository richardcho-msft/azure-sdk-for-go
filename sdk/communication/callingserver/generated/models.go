//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.0, generator: @autorest/go@4.0.0-preview.43)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package generated

type AcsCallParticipantDto struct {
	// Communication identifier of the participant
	Identifier *CommunicationIdentifierModel `json:"identifier,omitempty"`

	// Is participant muted
	IsMuted *bool `json:"isMuted,omitempty"`
}

type AddParticipantsFailedEvent struct {
	// Call connection ID.
	CallConnectionID *string `json:"callConnectionId,omitempty"`

	// Correlation ID for event to call correlation. Also called ChainId for skype chain ID.
	CorrelationID *string `json:"correlationId,omitempty"`

	// Operation context
	OperationContext *string `json:"operationContext,omitempty"`

	// Participants failed to be added
	Participants []*CommunicationIdentifierModel `json:"participants,omitempty"`
	ResultInfo *ResultInformation `json:"resultInfo,omitempty"`

	// Server call ID.
	ServerCallID *string `json:"serverCallId,omitempty"`
	Type *AcsEventType `json:"type,omitempty"`
}

type AddParticipantsRequest struct {
	// REQUIRED; The participants to invite.
	ParticipantsToAdd []*CommunicationIdentifierModel `json:"participantsToAdd,omitempty"`

	// Gets or sets the timeout to wait for the invited participant to pickup. The maximum value of this is 180 seconds
	InvitationTimeoutInSeconds *int32 `json:"invitationTimeoutInSeconds,omitempty"`

	// The operation context.
	OperationContext *string `json:"operationContext,omitempty"`

	// The source caller Id that's shown to the PSTN participant being invited. Required only when inviting a PSTN participant.
	SourceCallerID *PhoneNumberIdentifierModel `json:"sourceCallerId,omitempty"`
}

type AddParticipantsResponse struct {
	// The operation context provided by client.
	OperationContext *string `json:"operationContext,omitempty"`
	Participants []*AcsCallParticipantDto `json:"participants,omitempty"`
}

type AddParticipantsSucceededEvent struct {
	// Call connection ID.
	CallConnectionID *string `json:"callConnectionId,omitempty"`

	// Correlation ID for event to call correlation. Also called ChainId for skype chain ID.
	CorrelationID *string `json:"correlationId,omitempty"`

	// Operation context
	OperationContext *string `json:"operationContext,omitempty"`

	// Participants added
	Participants []*CommunicationIdentifierModel `json:"participants,omitempty"`
	ResultInfo *ResultInformation `json:"resultInfo,omitempty"`

	// Server call ID.
	ServerCallID *string `json:"serverCallId,omitempty"`
	Type *AcsEventType `json:"type,omitempty"`
}

// AnswerCallRequest - The request payload for answering the call.
type AnswerCallRequest struct {
	// REQUIRED; The context associated with the call.
	IncomingCallContext *string `json:"incomingCallContext,omitempty"`

	// The callback uri.
	CallbackURI *string `json:"callbackUri,omitempty"`
}

type CallConnectedEvent struct {
	// Call connection ID.
	CallConnectionID *string `json:"callConnectionId,omitempty"`

	// Correlation ID for event to call correlation. Also called ChainId for skype chain ID.
	CorrelationID *string `json:"correlationId,omitempty"`

	// Server call ID.
	ServerCallID *string `json:"serverCallId,omitempty"`
	Type *AcsEventType `json:"type,omitempty"`
}

type CallConnectionPropertiesDto struct {
	// The call connection id.
	CallConnectionID *string `json:"callConnectionId,omitempty"`

	// The state of the call connection.
	CallConnectionState *CallConnectionStateModel `json:"callConnectionState,omitempty"`

	// The callback URI.
	CallbackURI *string `json:"callbackUri,omitempty"`

	// The server call id.
	ServerCallID *string `json:"serverCallId,omitempty"`

	// The source of the call.
	Source *CallSourceDto `json:"source,omitempty"`

	// The subject.
	Subject *string `json:"subject,omitempty"`

	// The targets of the call.
	Targets []*CommunicationIdentifierModel `json:"targets,omitempty"`
}

// CallConnectionsClientAddParticipantOptions contains the optional parameters for the CallConnectionsClient.AddParticipant
// method.
type CallConnectionsClientAddParticipantOptions struct {
	// placeholder for future optional parameters
}

// CallConnectionsClientGetCallOptions contains the optional parameters for the CallConnectionsClient.GetCall method.
type CallConnectionsClientGetCallOptions struct {
	// placeholder for future optional parameters
}

// CallConnectionsClientGetParticipantOptions contains the optional parameters for the CallConnectionsClient.GetParticipant
// method.
type CallConnectionsClientGetParticipantOptions struct {
	// placeholder for future optional parameters
}

// CallConnectionsClientGetParticipantsOptions contains the optional parameters for the CallConnectionsClient.GetParticipants
// method.
type CallConnectionsClientGetParticipantsOptions struct {
	// placeholder for future optional parameters
}

// CallConnectionsClientHangupCallOptions contains the optional parameters for the CallConnectionsClient.HangupCall method.
type CallConnectionsClientHangupCallOptions struct {
	// placeholder for future optional parameters
}

// CallConnectionsClientRemoveParticipantsOptions contains the optional parameters for the CallConnectionsClient.RemoveParticipants
// method.
type CallConnectionsClientRemoveParticipantsOptions struct {
	// placeholder for future optional parameters
}

// CallConnectionsClientTerminateCallOptions contains the optional parameters for the CallConnectionsClient.TerminateCall
// method.
type CallConnectionsClientTerminateCallOptions struct {
	// placeholder for future optional parameters
}

// CallConnectionsClientTransferToParticipantOptions contains the optional parameters for the CallConnectionsClient.TransferToParticipant
// method.
type CallConnectionsClientTransferToParticipantOptions struct {
	// placeholder for future optional parameters
}

type CallDisconnectedEvent struct {
	// Call connection ID.
	CallConnectionID *string `json:"callConnectionId,omitempty"`

	// Correlation ID for event to call correlation. Also called ChainId for skype chain ID.
	CorrelationID *string `json:"correlationId,omitempty"`

	// Server call ID.
	ServerCallID *string `json:"serverCallId,omitempty"`
	Type *AcsEventType `json:"type,omitempty"`
}

// CallLocator - The locator used for joining or taking action on a call.
type CallLocator struct {
	// The group call id
	GroupCallID *string `json:"groupCallId,omitempty"`

	// The call locator kind.
	Kind *CallLocatorKind `json:"kind,omitempty"`

	// The server call id.
	ServerCallID *string `json:"serverCallId,omitempty"`
}

type CallSourceDto struct {
	// REQUIRED; The identifier of the source of the call
	Identifier *CommunicationIdentifierModel `json:"identifier,omitempty"`

	// The alternate identity of the source of the call if dialing out to a pstn number
	CallerID *PhoneNumberIdentifierModel `json:"callerId,omitempty"`
}

type CallTransferAcceptedEvent struct {
	// Call connection ID.
	CallConnectionID *string `json:"callConnectionId,omitempty"`

	// Correlation ID for event to call correlation. Also called ChainId for skype chain ID.
	CorrelationID *string `json:"correlationId,omitempty"`

	// Operation context
	OperationContext *string `json:"operationContext,omitempty"`
	ResultInfo *ResultInformation `json:"resultInfo,omitempty"`

	// Server call ID.
	ServerCallID *string `json:"serverCallId,omitempty"`
	Type *AcsEventType `json:"type,omitempty"`
}

type CallTransferFailedEvent struct {
	// Call connection ID.
	CallConnectionID *string `json:"callConnectionId,omitempty"`

	// Correlation ID for event to call correlation. Also called ChainId for skype chain ID.
	CorrelationID *string `json:"correlationId,omitempty"`

	// Operation context
	OperationContext *string `json:"operationContext,omitempty"`
	ResultInfo *ResultInformation `json:"resultInfo,omitempty"`

	// Server call ID.
	ServerCallID *string `json:"serverCallId,omitempty"`
	Type *AcsEventType `json:"type,omitempty"`
}

type CommunicationError struct {
	Code *string `json:"code,omitempty"`
	Details []*CommunicationError `json:"details,omitempty"`
	Innererror *CommunicationError `json:"innererror,omitempty"`
	Message *string `json:"message,omitempty"`
	Target *string `json:"target,omitempty"`
}

// CommunicationErrorResponse - The Communication Services error response
type CommunicationErrorResponse struct {
	// REQUIRED
	Error *CommunicationError `json:"error,omitempty"`
}

type CommunicationIdentifierModel struct {
	// The communication user.
	CommunicationUser *CommunicationUserIdentifierModel `json:"communicationUser,omitempty"`

	// Type of CommunicationIdentifierModel.
	Kind *CommunicationIdentifierModelKind `json:"kind,omitempty"`

	// The Microsoft Teams user.
	MicrosoftTeamsUser *MicrosoftTeamsUserIdentifierModel `json:"microsoftTeamsUser,omitempty"`

	// The phone number.
	PhoneNumber *PhoneNumberIdentifierModel `json:"phoneNumber,omitempty"`

	// Full ID of the identifier.
	RawID *string `json:"rawId,omitempty"`
}

type CommunicationUserIdentifierModel struct {
	ID *string `json:"id,omitempty"`
}

// ContentClientCancelAllMediaOperationsOptions contains the optional parameters for the ContentClient.CancelAllMediaOperations
// method.
type ContentClientCancelAllMediaOperationsOptions struct {
	// placeholder for future optional parameters
}

// ContentClientPlayOptions contains the optional parameters for the ContentClient.Play method.
type ContentClientPlayOptions struct {
	// placeholder for future optional parameters
}

// ContentClientRecordingOptions contains the optional parameters for the ContentClient.Recording method.
type ContentClientRecordingOptions struct {
	// placeholder for future optional parameters
}

type CreateCallRequest struct {
	// REQUIRED; The callback URI.
	CallbackURI *string `json:"callbackUri,omitempty"`

	// REQUIRED; The source of the call.
	Source *CallSourceDto `json:"source,omitempty"`

	// REQUIRED; The targets of the call.
	Targets []*CommunicationIdentifierModel `json:"targets,omitempty"`

	// The subject.
	Subject *string `json:"subject,omitempty"`
}

type FileSource struct {
	// REQUIRED; Uri for the audio file to be played
	URI *string `json:"uri,omitempty"`
}

type GetParticipantsResponse struct {
	NextLink *string `json:"nextLink,omitempty"`
	Values []*AcsCallParticipantDto `json:"values,omitempty"`
}

type MicrosoftTeamsUserIdentifierModel struct {
	// REQUIRED
	UserID *string `json:"userId,omitempty"`
	Cloud *CommunicationCloudEnvironmentModel `json:"cloud,omitempty"`
	IsAnonymous *bool `json:"isAnonymous,omitempty"`
}

type ParticipantsUpdatedEvent struct {
	// Call connection ID.
	CallConnectionID *string `json:"callConnectionId,omitempty"`

	// Correlation ID for event to call correlation. Also called ChainId for skype chain ID.
	CorrelationID *string `json:"correlationId,omitempty"`

	// List of current participants in the call.
	Participants []*CommunicationIdentifierModel `json:"participants,omitempty"`

	// Server call ID.
	ServerCallID *string `json:"serverCallId,omitempty"`
	Type *AcsEventType `json:"type,omitempty"`
}

type PhoneNumberIdentifierModel struct {
	Value *string `json:"value,omitempty"`
}

type PlayOptions struct {
	// REQUIRED; The option to play the provided audio source in loop when set to true
	Loop *bool `json:"loop,omitempty"`
}

type PlayRequest struct {
	// REQUIRED; The source of the audio to be played.
	PlaySourceInfo *PlaySource `json:"playSourceInfo,omitempty"`

	// The value to identify context of the operation.
	OperationContext *string `json:"operationContext,omitempty"`

	// Defines options for playing the audio.
	PlayOptions *PlayOptions `json:"playOptions,omitempty"`

	// The list of call participants play provided audio to. Plays to everyone in the call when not provided.
	PlayTo []*CommunicationIdentifierModel `json:"playTo,omitempty"`
}

type PlaySource struct {
	// REQUIRED; Defines the type of the play source
	SourceType *PlaySourceType `json:"sourceType,omitempty"`

	// Defines the file source info to be used for play
	FileSource *FileSource `json:"fileSource,omitempty"`

	// Defines the identifier to be used for caching related media
	PlaySourceID *string `json:"playSourceId,omitempty"`
}

type RecordingStatusResponse struct {
	RecordingID *string `json:"recordingId,omitempty"`
	RecordingStatus *RecordingStatus `json:"recordingStatus,omitempty"`
}

// RedirectCallRequest - The request payload for redirecting the call.
type RedirectCallRequest struct {
	// REQUIRED; The context associated with the call.
	IncomingCallContext *string `json:"incomingCallContext,omitempty"`

	// REQUIRED; The target identity to redirect the call to.
	Target *CommunicationIdentifierModel `json:"target,omitempty"`
}

// RejectCallRequest - The request payload for rejecting the call.
type RejectCallRequest struct {
	// REQUIRED; The context associated with the call.
	IncomingCallContext *string `json:"incomingCallContext,omitempty"`

	// The rejection reason.
	CallRejectReason *CallRejectReason `json:"callRejectReason,omitempty"`
}

// RemoveParticipantsRequest - The remove participant by identifier request.
type RemoveParticipantsRequest struct {
	// REQUIRED; The participants to invite.
	ParticipantsToRemove []*CommunicationIdentifierModel `json:"participantsToRemove,omitempty"`

	// The operation context.
	OperationContext *string `json:"operationContext,omitempty"`
}

type RemoveParticipantsResponse struct {
	// The operation context provided by client.
	OperationContext *string `json:"operationContext,omitempty"`
}

type ResultInformation struct {
	Code *int32 `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	SubCode *int32 `json:"subCode,omitempty"`
}

// ServerCallingClientAnswerCallOptions contains the optional parameters for the ServerCallingClient.AnswerCall method.
type ServerCallingClientAnswerCallOptions struct {
	// placeholder for future optional parameters
}

// ServerCallingClientCreateCallOptions contains the optional parameters for the ServerCallingClient.CreateCall method.
type ServerCallingClientCreateCallOptions struct {
	// placeholder for future optional parameters
}

// ServerCallingClientRedirectCallOptions contains the optional parameters for the ServerCallingClient.RedirectCall method.
type ServerCallingClientRedirectCallOptions struct {
	// placeholder for future optional parameters
}

// ServerCallingClientRejectCallOptions contains the optional parameters for the ServerCallingClient.RejectCall method.
type ServerCallingClientRejectCallOptions struct {
	// placeholder for future optional parameters
}

// ServerCallsClientGetRecordingPropertiesOptions contains the optional parameters for the ServerCallsClient.GetRecordingProperties
// method.
type ServerCallsClientGetRecordingPropertiesOptions struct {
	// placeholder for future optional parameters
}

// ServerCallsClientPauseRecordingOptions contains the optional parameters for the ServerCallsClient.PauseRecording method.
type ServerCallsClientPauseRecordingOptions struct {
	// placeholder for future optional parameters
}

// ServerCallsClientResumeRecordingOptions contains the optional parameters for the ServerCallsClient.ResumeRecording method.
type ServerCallsClientResumeRecordingOptions struct {
	// placeholder for future optional parameters
}

// ServerCallsClientStopRecordingOptions contains the optional parameters for the ServerCallsClient.StopRecording method.
type ServerCallsClientStopRecordingOptions struct {
	// placeholder for future optional parameters
}

// StartCallRecordingRequest - The request payload start for call recording operation with call locator.
type StartCallRecordingRequest struct {
	// REQUIRED; The call locator.
	CallLocator *CallLocator `json:"callLocator,omitempty"`

	// The channel type of call recording.
	RecordingChannelType *RecordingChannelType `json:"recordingChannelType,omitempty"`

	// The content type of call recording.
	RecordingContentType *RecordingContentType `json:"recordingContentType,omitempty"`

	// The format type of call recording.
	RecordingFormatType *RecordingFormatType `json:"recordingFormatType,omitempty"`

	// The uri to send notifications to.
	RecordingStateCallbackURI *string `json:"recordingStateCallbackUri,omitempty"`
}

type TransferCallResponse struct {
	// The operation context provided by client.
	OperationContext *string `json:"operationContext,omitempty"`
}

// TransferToParticipantRequest - The transfer call to participant request.
type TransferToParticipantRequest struct {
	// REQUIRED; The identity of the target where call should be transferred to.
	TargetParticipant *CommunicationIdentifierModel `json:"targetParticipant,omitempty"`

	// The operation context.
	OperationContext *string `json:"operationContext,omitempty"`

	// The caller ID of the transferee when transferring to PSTN.
	TransfereeCallerID *PhoneNumberIdentifierModel `json:"transfereeCallerId,omitempty"`

	// The user to user information.
	UserToUserInformation *string `json:"userToUserInformation,omitempty"`
}

