//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.0, generator: @autorest/go@4.0.0-preview.43)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

type CallConnectionsClient struct {
	endpoint string
	pl runtime.Pipeline
}

// NewCallConnectionsClient creates a new instance of CallConnectionsClient with the specified values.
// endpoint - The endpoint of the Azure Communication resource.
// pl - the pipeline used for sending requests and handling responses.
func NewCallConnectionsClient(endpoint string, pl runtime.Pipeline) *CallConnectionsClient {
	client := &CallConnectionsClient{
		endpoint: endpoint,
		pl: pl,
	}
	return client
}

// AddParticipant - Add participants to the call.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// callConnectionID - The call connection Id
// addParticipantsRequest - The add participants request.
// options - CallConnectionsClientAddParticipantOptions contains the optional parameters for the CallConnectionsClient.AddParticipant
// method.
func (client *CallConnectionsClient) AddParticipant(ctx context.Context, callConnectionID string, addParticipantsRequest AddParticipantsRequest, options *CallConnectionsClientAddParticipantOptions) (CallConnectionsClientAddParticipantResponse, error) {
	req, err := client.addParticipantCreateRequest(ctx, callConnectionID, addParticipantsRequest, options)
	if err != nil {
		return CallConnectionsClientAddParticipantResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CallConnectionsClientAddParticipantResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return CallConnectionsClientAddParticipantResponse{}, runtime.NewResponseError(resp)
	}
	return client.addParticipantHandleResponse(resp)
}

// addParticipantCreateRequest creates the AddParticipant request.
func (client *CallConnectionsClient) addParticipantCreateRequest(ctx context.Context, callConnectionID string, addParticipantsRequest AddParticipantsRequest, options *CallConnectionsClientAddParticipantOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections/{callConnectionId}/participants:add"
	if callConnectionID == "" {
		return nil, errors.New("parameter callConnectionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{callConnectionId}", url.PathEscape(callConnectionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, addParticipantsRequest)
}

// addParticipantHandleResponse handles the AddParticipant response.
func (client *CallConnectionsClient) addParticipantHandleResponse(resp *http.Response) (CallConnectionsClientAddParticipantResponse, error) {
	result := CallConnectionsClientAddParticipantResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AddParticipantsResponse); err != nil {
		return CallConnectionsClientAddParticipantResponse{}, err
	}
	return result, nil
}

// GetCall - Get call connection.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// callConnectionID - The call connection id.
// options - CallConnectionsClientGetCallOptions contains the optional parameters for the CallConnectionsClient.GetCall method.
func (client *CallConnectionsClient) GetCall(ctx context.Context, callConnectionID string, options *CallConnectionsClientGetCallOptions) (CallConnectionsClientGetCallResponse, error) {
	req, err := client.getCallCreateRequest(ctx, callConnectionID, options)
	if err != nil {
		return CallConnectionsClientGetCallResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CallConnectionsClientGetCallResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CallConnectionsClientGetCallResponse{}, runtime.NewResponseError(resp)
	}
	return client.getCallHandleResponse(resp)
}

// getCallCreateRequest creates the GetCall request.
func (client *CallConnectionsClient) getCallCreateRequest(ctx context.Context, callConnectionID string, options *CallConnectionsClientGetCallOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections/{callConnectionId}"
	if callConnectionID == "" {
		return nil, errors.New("parameter callConnectionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{callConnectionId}", url.PathEscape(callConnectionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getCallHandleResponse handles the GetCall response.
func (client *CallConnectionsClient) getCallHandleResponse(resp *http.Response) (CallConnectionsClientGetCallResponse, error) {
	result := CallConnectionsClientGetCallResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CallConnectionPropertiesDto); err != nil {
		return CallConnectionsClientGetCallResponse{}, err
	}
	return result, nil
}

// GetParticipant - Get participant from a call.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// callConnectionID - The call connection Id
// participantMri - MRI of the participants to retrieve.
// options - CallConnectionsClientGetParticipantOptions contains the optional parameters for the CallConnectionsClient.GetParticipant
// method.
func (client *CallConnectionsClient) GetParticipant(ctx context.Context, callConnectionID string, participantMri string, options *CallConnectionsClientGetParticipantOptions) (CallConnectionsClientGetParticipantResponse, error) {
	req, err := client.getParticipantCreateRequest(ctx, callConnectionID, participantMri, options)
	if err != nil {
		return CallConnectionsClientGetParticipantResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CallConnectionsClientGetParticipantResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CallConnectionsClientGetParticipantResponse{}, runtime.NewResponseError(resp)
	}
	return client.getParticipantHandleResponse(resp)
}

// getParticipantCreateRequest creates the GetParticipant request.
func (client *CallConnectionsClient) getParticipantCreateRequest(ctx context.Context, callConnectionID string, participantMri string, options *CallConnectionsClientGetParticipantOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections/{callConnectionId}/participants/{participantMri}"
	if callConnectionID == "" {
		return nil, errors.New("parameter callConnectionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{callConnectionId}", url.PathEscape(callConnectionID))
	if participantMri == "" {
		return nil, errors.New("parameter participantMri cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{participantMri}", url.PathEscape(participantMri))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getParticipantHandleResponse handles the GetParticipant response.
func (client *CallConnectionsClient) getParticipantHandleResponse(resp *http.Response) (CallConnectionsClientGetParticipantResponse, error) {
	result := CallConnectionsClientGetParticipantResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AcsCallParticipantDto); err != nil {
		return CallConnectionsClientGetParticipantResponse{}, err
	}
	return result, nil
}

// GetParticipants - Get participants from a call.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// callConnectionID - The call connection Id
// options - CallConnectionsClientGetParticipantsOptions contains the optional parameters for the CallConnectionsClient.GetParticipants
// method.
func (client *CallConnectionsClient) GetParticipants(ctx context.Context, callConnectionID string, options *CallConnectionsClientGetParticipantsOptions) (CallConnectionsClientGetParticipantsResponse, error) {
	req, err := client.getParticipantsCreateRequest(ctx, callConnectionID, options)
	if err != nil {
		return CallConnectionsClientGetParticipantsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CallConnectionsClientGetParticipantsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CallConnectionsClientGetParticipantsResponse{}, runtime.NewResponseError(resp)
	}
	return client.getParticipantsHandleResponse(resp)
}

// getParticipantsCreateRequest creates the GetParticipants request.
func (client *CallConnectionsClient) getParticipantsCreateRequest(ctx context.Context, callConnectionID string, options *CallConnectionsClientGetParticipantsOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections/{callConnectionId}/participants"
	if callConnectionID == "" {
		return nil, errors.New("parameter callConnectionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{callConnectionId}", url.PathEscape(callConnectionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getParticipantsHandleResponse handles the GetParticipants response.
func (client *CallConnectionsClient) getParticipantsHandleResponse(resp *http.Response) (CallConnectionsClientGetParticipantsResponse, error) {
	result := CallConnectionsClientGetParticipantsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GetParticipantsResponse); err != nil {
		return CallConnectionsClientGetParticipantsResponse{}, err
	}
	return result, nil
}

// HangupCall - Hangup the call.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// callConnectionID - The call connection id.
// options - CallConnectionsClientHangupCallOptions contains the optional parameters for the CallConnectionsClient.HangupCall
// method.
func (client *CallConnectionsClient) HangupCall(ctx context.Context, callConnectionID string, options *CallConnectionsClientHangupCallOptions) (CallConnectionsClientHangupCallResponse, error) {
	req, err := client.hangupCallCreateRequest(ctx, callConnectionID, options)
	if err != nil {
		return CallConnectionsClientHangupCallResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CallConnectionsClientHangupCallResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return CallConnectionsClientHangupCallResponse{}, runtime.NewResponseError(resp)
	}
	return CallConnectionsClientHangupCallResponse{}, nil
}

// hangupCallCreateRequest creates the HangupCall request.
func (client *CallConnectionsClient) hangupCallCreateRequest(ctx context.Context, callConnectionID string, options *CallConnectionsClientHangupCallOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections/{callConnectionId}"
	if callConnectionID == "" {
		return nil, errors.New("parameter callConnectionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{callConnectionId}", url.PathEscape(callConnectionID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// RemoveParticipants - Remove participant from the call using identifier.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// callConnectionID - The call connection id.
// removeParticipantsRequest - The participants to be removed from the call.
// options - CallConnectionsClientRemoveParticipantsOptions contains the optional parameters for the CallConnectionsClient.RemoveParticipants
// method.
func (client *CallConnectionsClient) RemoveParticipants(ctx context.Context, callConnectionID string, removeParticipantsRequest RemoveParticipantsRequest, options *CallConnectionsClientRemoveParticipantsOptions) (CallConnectionsClientRemoveParticipantsResponse, error) {
	req, err := client.removeParticipantsCreateRequest(ctx, callConnectionID, removeParticipantsRequest, options)
	if err != nil {
		return CallConnectionsClientRemoveParticipantsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CallConnectionsClientRemoveParticipantsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return CallConnectionsClientRemoveParticipantsResponse{}, runtime.NewResponseError(resp)
	}
	return client.removeParticipantsHandleResponse(resp)
}

// removeParticipantsCreateRequest creates the RemoveParticipants request.
func (client *CallConnectionsClient) removeParticipantsCreateRequest(ctx context.Context, callConnectionID string, removeParticipantsRequest RemoveParticipantsRequest, options *CallConnectionsClientRemoveParticipantsOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections/{callConnectionId}/participants:remove"
	if callConnectionID == "" {
		return nil, errors.New("parameter callConnectionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{callConnectionId}", url.PathEscape(callConnectionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, removeParticipantsRequest)
}

// removeParticipantsHandleResponse handles the RemoveParticipants response.
func (client *CallConnectionsClient) removeParticipantsHandleResponse(resp *http.Response) (CallConnectionsClientRemoveParticipantsResponse, error) {
	result := CallConnectionsClientRemoveParticipantsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RemoveParticipantsResponse); err != nil {
		return CallConnectionsClientRemoveParticipantsResponse{}, err
	}
	return result, nil
}

// TerminateCall - Terminate a call using CallConnectionId.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// callConnectionID - The terminate call request.
// options - CallConnectionsClientTerminateCallOptions contains the optional parameters for the CallConnectionsClient.TerminateCall
// method.
func (client *CallConnectionsClient) TerminateCall(ctx context.Context, callConnectionID string, options *CallConnectionsClientTerminateCallOptions) (CallConnectionsClientTerminateCallResponse, error) {
	req, err := client.terminateCallCreateRequest(ctx, callConnectionID, options)
	if err != nil {
		return CallConnectionsClientTerminateCallResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CallConnectionsClientTerminateCallResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return CallConnectionsClientTerminateCallResponse{}, runtime.NewResponseError(resp)
	}
	return CallConnectionsClientTerminateCallResponse{}, nil
}

// terminateCallCreateRequest creates the TerminateCall request.
func (client *CallConnectionsClient) terminateCallCreateRequest(ctx context.Context, callConnectionID string, options *CallConnectionsClientTerminateCallOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections/{callConnectionId}:terminate"
	if callConnectionID == "" {
		return nil, errors.New("parameter callConnectionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{callConnectionId}", url.PathEscape(callConnectionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// TransferToParticipant - Transfer the call to a participant.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// callConnectionID - The call connection id.
// transferToParticipantRequest - The transfer to participant request.
// options - CallConnectionsClientTransferToParticipantOptions contains the optional parameters for the CallConnectionsClient.TransferToParticipant
// method.
func (client *CallConnectionsClient) TransferToParticipant(ctx context.Context, callConnectionID string, transferToParticipantRequest TransferToParticipantRequest, options *CallConnectionsClientTransferToParticipantOptions) (CallConnectionsClientTransferToParticipantResponse, error) {
	req, err := client.transferToParticipantCreateRequest(ctx, callConnectionID, transferToParticipantRequest, options)
	if err != nil {
		return CallConnectionsClientTransferToParticipantResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CallConnectionsClientTransferToParticipantResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return CallConnectionsClientTransferToParticipantResponse{}, runtime.NewResponseError(resp)
	}
	return client.transferToParticipantHandleResponse(resp)
}

// transferToParticipantCreateRequest creates the TransferToParticipant request.
func (client *CallConnectionsClient) transferToParticipantCreateRequest(ctx context.Context, callConnectionID string, transferToParticipantRequest TransferToParticipantRequest, options *CallConnectionsClientTransferToParticipantOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections/{callConnectionId}:transferToParticipant"
	if callConnectionID == "" {
		return nil, errors.New("parameter callConnectionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{callConnectionId}", url.PathEscape(callConnectionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, transferToParticipantRequest)
}

// transferToParticipantHandleResponse handles the TransferToParticipant response.
func (client *CallConnectionsClient) transferToParticipantHandleResponse(resp *http.Response) (CallConnectionsClientTransferToParticipantResponse, error) {
	result := CallConnectionsClientTransferToParticipantResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.TransferCallResponse); err != nil {
		return CallConnectionsClientTransferToParticipantResponse{}, err
	}
	return result, nil
}

