//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.0, generator: @autorest/go@4.0.0-preview.43)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

type ContentClient struct {
	endpoint string
	pl runtime.Pipeline
}

// NewContentClient creates a new instance of ContentClient with the specified values.
// endpoint - The endpoint of the Azure Communication resource.
// pl - the pipeline used for sending requests and handling responses.
func NewContentClient(endpoint string, pl runtime.Pipeline) *ContentClient {
	client := &ContentClient{
		endpoint: endpoint,
		pl: pl,
	}
	return client
}

// CancelAllMediaOperations - Cancel all media operations in a call.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// callConnectionID - The call connection id
// options - ContentClientCancelAllMediaOperationsOptions contains the optional parameters for the ContentClient.CancelAllMediaOperations
// method.
func (client *ContentClient) CancelAllMediaOperations(ctx context.Context, callConnectionID string, options *ContentClientCancelAllMediaOperationsOptions) (ContentClientCancelAllMediaOperationsResponse, error) {
	req, err := client.cancelAllMediaOperationsCreateRequest(ctx, callConnectionID, options)
	if err != nil {
		return ContentClientCancelAllMediaOperationsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContentClientCancelAllMediaOperationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return ContentClientCancelAllMediaOperationsResponse{}, runtime.NewResponseError(resp)
	}
	return ContentClientCancelAllMediaOperationsResponse{}, nil
}

// cancelAllMediaOperationsCreateRequest creates the CancelAllMediaOperations request.
func (client *ContentClient) cancelAllMediaOperationsCreateRequest(ctx context.Context, callConnectionID string, options *ContentClientCancelAllMediaOperationsOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections/{callConnectionId}:cancelAllMediaOperations"
	if callConnectionID == "" {
		return nil, errors.New("parameter callConnectionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{callConnectionId}", url.PathEscape(callConnectionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// Play - Plays audio to participants in the call.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// options - ContentClientPlayOptions contains the optional parameters for the ContentClient.Play method.
func (client *ContentClient) Play(ctx context.Context, callConnectionID string, playRequest PlayRequest, options *ContentClientPlayOptions) (ContentClientPlayResponse, error) {
	req, err := client.playCreateRequest(ctx, callConnectionID, playRequest, options)
	if err != nil {
		return ContentClientPlayResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContentClientPlayResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return ContentClientPlayResponse{}, runtime.NewResponseError(resp)
	}
	return ContentClientPlayResponse{}, nil
}

// playCreateRequest creates the Play request.
func (client *ContentClient) playCreateRequest(ctx context.Context, callConnectionID string, playRequest PlayRequest, options *ContentClientPlayOptions) (*policy.Request, error) {
	urlPath := "/calling/callConnections/{callConnectionId}:play"
	if callConnectionID == "" {
		return nil, errors.New("parameter callConnectionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{callConnectionId}", url.PathEscape(callConnectionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, runtime.MarshalAsJSON(req, playRequest)
}

// Recording - Start recording the call.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// startCallRecording - The request body of start call recording request.
// options - ContentClientRecordingOptions contains the optional parameters for the ContentClient.Recording method.
func (client *ContentClient) Recording(ctx context.Context, startCallRecording StartCallRecordingRequest, options *ContentClientRecordingOptions) (ContentClientRecordingResponse, error) {
	req, err := client.recordingCreateRequest(ctx, startCallRecording, options)
	if err != nil {
		return ContentClientRecordingResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContentClientRecordingResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ContentClientRecordingResponse{}, runtime.NewResponseError(resp)
	}
	return client.recordingHandleResponse(resp)
}

// recordingCreateRequest creates the Recording request.
func (client *ContentClient) recordingCreateRequest(ctx context.Context, startCallRecording StartCallRecordingRequest, options *ContentClientRecordingOptions) (*policy.Request, error) {
	urlPath := "/calling/recordings"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, startCallRecording)
}

// recordingHandleResponse handles the Recording response.
func (client *ContentClient) recordingHandleResponse(resp *http.Response) (ContentClientRecordingResponse, error) {
	result := ContentClientRecordingResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RecordingStatusResponse); err != nil {
		return ContentClientRecordingResponse{}, err
	}
	return result, nil
}

