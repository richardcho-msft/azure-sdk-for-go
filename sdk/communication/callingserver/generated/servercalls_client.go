//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.0, generator: @autorest/go@4.0.0-preview.43)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

type ServerCallsClient struct {
	endpoint string
	pl runtime.Pipeline
}

// NewServerCallsClient creates a new instance of ServerCallsClient with the specified values.
// endpoint - The endpoint of the Azure Communication resource.
// pl - the pipeline used for sending requests and handling responses.
func NewServerCallsClient(endpoint string, pl runtime.Pipeline) *ServerCallsClient {
	client := &ServerCallsClient{
		endpoint: endpoint,
		pl: pl,
	}
	return client
}

// GetRecordingProperties - Get call recording properties.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// recordingID - The recording id.
// options - ServerCallsClientGetRecordingPropertiesOptions contains the optional parameters for the ServerCallsClient.GetRecordingProperties
// method.
func (client *ServerCallsClient) GetRecordingProperties(ctx context.Context, recordingID string, options *ServerCallsClientGetRecordingPropertiesOptions) (ServerCallsClientGetRecordingPropertiesResponse, error) {
	req, err := client.getRecordingPropertiesCreateRequest(ctx, recordingID, options)
	if err != nil {
		return ServerCallsClientGetRecordingPropertiesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ServerCallsClientGetRecordingPropertiesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ServerCallsClientGetRecordingPropertiesResponse{}, runtime.NewResponseError(resp)
	}
	return client.getRecordingPropertiesHandleResponse(resp)
}

// getRecordingPropertiesCreateRequest creates the GetRecordingProperties request.
func (client *ServerCallsClient) getRecordingPropertiesCreateRequest(ctx context.Context, recordingID string, options *ServerCallsClientGetRecordingPropertiesOptions) (*policy.Request, error) {
	urlPath := "/calling/recordings/{recordingId}"
	if recordingID == "" {
		return nil, errors.New("parameter recordingID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recordingId}", url.PathEscape(recordingID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getRecordingPropertiesHandleResponse handles the GetRecordingProperties response.
func (client *ServerCallsClient) getRecordingPropertiesHandleResponse(resp *http.Response) (ServerCallsClientGetRecordingPropertiesResponse, error) {
	result := ServerCallsClientGetRecordingPropertiesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RecordingStatusResponse); err != nil {
		return ServerCallsClientGetRecordingPropertiesResponse{}, err
	}
	return result, nil
}

// PauseRecording - Pause recording the call.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// recordingID - The recording id.
// options - ServerCallsClientPauseRecordingOptions contains the optional parameters for the ServerCallsClient.PauseRecording
// method.
func (client *ServerCallsClient) PauseRecording(ctx context.Context, recordingID string, options *ServerCallsClientPauseRecordingOptions) (ServerCallsClientPauseRecordingResponse, error) {
	req, err := client.pauseRecordingCreateRequest(ctx, recordingID, options)
	if err != nil {
		return ServerCallsClientPauseRecordingResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ServerCallsClientPauseRecordingResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return ServerCallsClientPauseRecordingResponse{}, runtime.NewResponseError(resp)
	}
	return ServerCallsClientPauseRecordingResponse{}, nil
}

// pauseRecordingCreateRequest creates the PauseRecording request.
func (client *ServerCallsClient) pauseRecordingCreateRequest(ctx context.Context, recordingID string, options *ServerCallsClientPauseRecordingOptions) (*policy.Request, error) {
	urlPath := "/calling/recordings/{recordingId}:pause"
	if recordingID == "" {
		return nil, errors.New("parameter recordingID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recordingId}", url.PathEscape(recordingID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// ResumeRecording - Resume recording the call.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// recordingID - The recording id.
// options - ServerCallsClientResumeRecordingOptions contains the optional parameters for the ServerCallsClient.ResumeRecording
// method.
func (client *ServerCallsClient) ResumeRecording(ctx context.Context, recordingID string, options *ServerCallsClientResumeRecordingOptions) (ServerCallsClientResumeRecordingResponse, error) {
	req, err := client.resumeRecordingCreateRequest(ctx, recordingID, options)
	if err != nil {
		return ServerCallsClientResumeRecordingResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ServerCallsClientResumeRecordingResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return ServerCallsClientResumeRecordingResponse{}, runtime.NewResponseError(resp)
	}
	return ServerCallsClientResumeRecordingResponse{}, nil
}

// resumeRecordingCreateRequest creates the ResumeRecording request.
func (client *ServerCallsClient) resumeRecordingCreateRequest(ctx context.Context, recordingID string, options *ServerCallsClientResumeRecordingOptions) (*policy.Request, error) {
	urlPath := "/calling/recordings/{recordingId}:resume"
	if recordingID == "" {
		return nil, errors.New("parameter recordingID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recordingId}", url.PathEscape(recordingID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// StopRecording - Stop recording the call.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-04-07-preview
// recordingID - The recording id.
// options - ServerCallsClientStopRecordingOptions contains the optional parameters for the ServerCallsClient.StopRecording
// method.
func (client *ServerCallsClient) StopRecording(ctx context.Context, recordingID string, options *ServerCallsClientStopRecordingOptions) (ServerCallsClientStopRecordingResponse, error) {
	req, err := client.stopRecordingCreateRequest(ctx, recordingID, options)
	if err != nil {
		return ServerCallsClientStopRecordingResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ServerCallsClientStopRecordingResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return ServerCallsClientStopRecordingResponse{}, runtime.NewResponseError(resp)
	}
	return ServerCallsClientStopRecordingResponse{}, nil
}

// stopRecordingCreateRequest creates the StopRecording request.
func (client *ServerCallsClient) stopRecordingCreateRequest(ctx context.Context, recordingID string, options *ServerCallsClientStopRecordingOptions) (*policy.Request, error) {
	urlPath := "/calling/recordings/{recordingId}"
	if recordingID == "" {
		return nil, errors.New("parameter recordingID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recordingId}", url.PathEscape(recordingID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-07-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

