//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.0, generator: @autorest/go@4.0.0-preview.43)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type AcsCallParticipantDto.
func (a AcsCallParticipantDto) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identifier", a.Identifier)
	populate(objectMap, "isMuted", a.IsMuted)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AcsCallParticipantDto.
func (a *AcsCallParticipantDto) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "identifier":
				err = unpopulate(val, "Identifier", &a.Identifier)
				delete(rawMsg, key)
		case "isMuted":
				err = unpopulate(val, "IsMuted", &a.IsMuted)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AddParticipantsFailedEvent.
func (a AddParticipantsFailedEvent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "callConnectionId", a.CallConnectionID)
	populate(objectMap, "correlationId", a.CorrelationID)
	populate(objectMap, "operationContext", a.OperationContext)
	populate(objectMap, "participants", a.Participants)
	populate(objectMap, "resultInfo", a.ResultInfo)
	populate(objectMap, "serverCallId", a.ServerCallID)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AddParticipantsFailedEvent.
func (a *AddParticipantsFailedEvent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "callConnectionId":
				err = unpopulate(val, "CallConnectionID", &a.CallConnectionID)
				delete(rawMsg, key)
		case "correlationId":
				err = unpopulate(val, "CorrelationID", &a.CorrelationID)
				delete(rawMsg, key)
		case "operationContext":
				err = unpopulate(val, "OperationContext", &a.OperationContext)
				delete(rawMsg, key)
		case "participants":
				err = unpopulate(val, "Participants", &a.Participants)
				delete(rawMsg, key)
		case "resultInfo":
				err = unpopulate(val, "ResultInfo", &a.ResultInfo)
				delete(rawMsg, key)
		case "serverCallId":
				err = unpopulate(val, "ServerCallID", &a.ServerCallID)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &a.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AddParticipantsRequest.
func (a AddParticipantsRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "invitationTimeoutInSeconds", a.InvitationTimeoutInSeconds)
	populate(objectMap, "operationContext", a.OperationContext)
	populate(objectMap, "participantsToAdd", a.ParticipantsToAdd)
	populate(objectMap, "sourceCallerId", a.SourceCallerID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AddParticipantsRequest.
func (a *AddParticipantsRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "invitationTimeoutInSeconds":
				err = unpopulate(val, "InvitationTimeoutInSeconds", &a.InvitationTimeoutInSeconds)
				delete(rawMsg, key)
		case "operationContext":
				err = unpopulate(val, "OperationContext", &a.OperationContext)
				delete(rawMsg, key)
		case "participantsToAdd":
				err = unpopulate(val, "ParticipantsToAdd", &a.ParticipantsToAdd)
				delete(rawMsg, key)
		case "sourceCallerId":
				err = unpopulate(val, "SourceCallerID", &a.SourceCallerID)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AddParticipantsResponse.
func (a AddParticipantsResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "operationContext", a.OperationContext)
	populate(objectMap, "participants", a.Participants)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AddParticipantsResponse.
func (a *AddParticipantsResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "operationContext":
				err = unpopulate(val, "OperationContext", &a.OperationContext)
				delete(rawMsg, key)
		case "participants":
				err = unpopulate(val, "Participants", &a.Participants)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AddParticipantsSucceededEvent.
func (a AddParticipantsSucceededEvent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "callConnectionId", a.CallConnectionID)
	populate(objectMap, "correlationId", a.CorrelationID)
	populate(objectMap, "operationContext", a.OperationContext)
	populate(objectMap, "participants", a.Participants)
	populate(objectMap, "resultInfo", a.ResultInfo)
	populate(objectMap, "serverCallId", a.ServerCallID)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AddParticipantsSucceededEvent.
func (a *AddParticipantsSucceededEvent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "callConnectionId":
				err = unpopulate(val, "CallConnectionID", &a.CallConnectionID)
				delete(rawMsg, key)
		case "correlationId":
				err = unpopulate(val, "CorrelationID", &a.CorrelationID)
				delete(rawMsg, key)
		case "operationContext":
				err = unpopulate(val, "OperationContext", &a.OperationContext)
				delete(rawMsg, key)
		case "participants":
				err = unpopulate(val, "Participants", &a.Participants)
				delete(rawMsg, key)
		case "resultInfo":
				err = unpopulate(val, "ResultInfo", &a.ResultInfo)
				delete(rawMsg, key)
		case "serverCallId":
				err = unpopulate(val, "ServerCallID", &a.ServerCallID)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &a.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AnswerCallRequest.
func (a AnswerCallRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "callbackUri", a.CallbackURI)
	populate(objectMap, "incomingCallContext", a.IncomingCallContext)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AnswerCallRequest.
func (a *AnswerCallRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "callbackUri":
				err = unpopulate(val, "CallbackURI", &a.CallbackURI)
				delete(rawMsg, key)
		case "incomingCallContext":
				err = unpopulate(val, "IncomingCallContext", &a.IncomingCallContext)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CallConnectedEvent.
func (c CallConnectedEvent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "callConnectionId", c.CallConnectionID)
	populate(objectMap, "correlationId", c.CorrelationID)
	populate(objectMap, "serverCallId", c.ServerCallID)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CallConnectedEvent.
func (c *CallConnectedEvent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "callConnectionId":
				err = unpopulate(val, "CallConnectionID", &c.CallConnectionID)
				delete(rawMsg, key)
		case "correlationId":
				err = unpopulate(val, "CorrelationID", &c.CorrelationID)
				delete(rawMsg, key)
		case "serverCallId":
				err = unpopulate(val, "ServerCallID", &c.ServerCallID)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &c.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CallConnectionPropertiesDto.
func (c CallConnectionPropertiesDto) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "callConnectionId", c.CallConnectionID)
	populate(objectMap, "callConnectionState", c.CallConnectionState)
	populate(objectMap, "callbackUri", c.CallbackURI)
	populate(objectMap, "serverCallId", c.ServerCallID)
	populate(objectMap, "source", c.Source)
	populate(objectMap, "subject", c.Subject)
	populate(objectMap, "targets", c.Targets)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CallConnectionPropertiesDto.
func (c *CallConnectionPropertiesDto) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "callConnectionId":
				err = unpopulate(val, "CallConnectionID", &c.CallConnectionID)
				delete(rawMsg, key)
		case "callConnectionState":
				err = unpopulate(val, "CallConnectionState", &c.CallConnectionState)
				delete(rawMsg, key)
		case "callbackUri":
				err = unpopulate(val, "CallbackURI", &c.CallbackURI)
				delete(rawMsg, key)
		case "serverCallId":
				err = unpopulate(val, "ServerCallID", &c.ServerCallID)
				delete(rawMsg, key)
		case "source":
				err = unpopulate(val, "Source", &c.Source)
				delete(rawMsg, key)
		case "subject":
				err = unpopulate(val, "Subject", &c.Subject)
				delete(rawMsg, key)
		case "targets":
				err = unpopulate(val, "Targets", &c.Targets)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CallDisconnectedEvent.
func (c CallDisconnectedEvent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "callConnectionId", c.CallConnectionID)
	populate(objectMap, "correlationId", c.CorrelationID)
	populate(objectMap, "serverCallId", c.ServerCallID)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CallDisconnectedEvent.
func (c *CallDisconnectedEvent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "callConnectionId":
				err = unpopulate(val, "CallConnectionID", &c.CallConnectionID)
				delete(rawMsg, key)
		case "correlationId":
				err = unpopulate(val, "CorrelationID", &c.CorrelationID)
				delete(rawMsg, key)
		case "serverCallId":
				err = unpopulate(val, "ServerCallID", &c.ServerCallID)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &c.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CallLocator.
func (c CallLocator) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupCallId", c.GroupCallID)
	populate(objectMap, "kind", c.Kind)
	populate(objectMap, "serverCallId", c.ServerCallID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CallLocator.
func (c *CallLocator) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "groupCallId":
				err = unpopulate(val, "GroupCallID", &c.GroupCallID)
				delete(rawMsg, key)
		case "kind":
				err = unpopulate(val, "Kind", &c.Kind)
				delete(rawMsg, key)
		case "serverCallId":
				err = unpopulate(val, "ServerCallID", &c.ServerCallID)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CallSourceDto.
func (c CallSourceDto) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "callerId", c.CallerID)
	populate(objectMap, "identifier", c.Identifier)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CallSourceDto.
func (c *CallSourceDto) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "callerId":
				err = unpopulate(val, "CallerID", &c.CallerID)
				delete(rawMsg, key)
		case "identifier":
				err = unpopulate(val, "Identifier", &c.Identifier)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CallTransferAcceptedEvent.
func (c CallTransferAcceptedEvent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "callConnectionId", c.CallConnectionID)
	populate(objectMap, "correlationId", c.CorrelationID)
	populate(objectMap, "operationContext", c.OperationContext)
	populate(objectMap, "resultInfo", c.ResultInfo)
	populate(objectMap, "serverCallId", c.ServerCallID)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CallTransferAcceptedEvent.
func (c *CallTransferAcceptedEvent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "callConnectionId":
				err = unpopulate(val, "CallConnectionID", &c.CallConnectionID)
				delete(rawMsg, key)
		case "correlationId":
				err = unpopulate(val, "CorrelationID", &c.CorrelationID)
				delete(rawMsg, key)
		case "operationContext":
				err = unpopulate(val, "OperationContext", &c.OperationContext)
				delete(rawMsg, key)
		case "resultInfo":
				err = unpopulate(val, "ResultInfo", &c.ResultInfo)
				delete(rawMsg, key)
		case "serverCallId":
				err = unpopulate(val, "ServerCallID", &c.ServerCallID)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &c.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CallTransferFailedEvent.
func (c CallTransferFailedEvent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "callConnectionId", c.CallConnectionID)
	populate(objectMap, "correlationId", c.CorrelationID)
	populate(objectMap, "operationContext", c.OperationContext)
	populate(objectMap, "resultInfo", c.ResultInfo)
	populate(objectMap, "serverCallId", c.ServerCallID)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CallTransferFailedEvent.
func (c *CallTransferFailedEvent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "callConnectionId":
				err = unpopulate(val, "CallConnectionID", &c.CallConnectionID)
				delete(rawMsg, key)
		case "correlationId":
				err = unpopulate(val, "CorrelationID", &c.CorrelationID)
				delete(rawMsg, key)
		case "operationContext":
				err = unpopulate(val, "OperationContext", &c.OperationContext)
				delete(rawMsg, key)
		case "resultInfo":
				err = unpopulate(val, "ResultInfo", &c.ResultInfo)
				delete(rawMsg, key)
		case "serverCallId":
				err = unpopulate(val, "ServerCallID", &c.ServerCallID)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &c.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CommunicationError.
func (c CommunicationError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "details", c.Details)
	populate(objectMap, "innererror", c.Innererror)
	populate(objectMap, "message", c.Message)
	populate(objectMap, "target", c.Target)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CommunicationError.
func (c *CommunicationError) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
				err = unpopulate(val, "Code", &c.Code)
				delete(rawMsg, key)
		case "details":
				err = unpopulate(val, "Details", &c.Details)
				delete(rawMsg, key)
		case "innererror":
				err = unpopulate(val, "Innererror", &c.Innererror)
				delete(rawMsg, key)
		case "message":
				err = unpopulate(val, "Message", &c.Message)
				delete(rawMsg, key)
		case "target":
				err = unpopulate(val, "Target", &c.Target)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CommunicationErrorResponse.
func (c CommunicationErrorResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", c.Error)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CommunicationErrorResponse.
func (c *CommunicationErrorResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
				err = unpopulate(val, "Error", &c.Error)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CommunicationIdentifierModel.
func (c CommunicationIdentifierModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "communicationUser", c.CommunicationUser)
	populate(objectMap, "kind", c.Kind)
	populate(objectMap, "microsoftTeamsUser", c.MicrosoftTeamsUser)
	populate(objectMap, "phoneNumber", c.PhoneNumber)
	populate(objectMap, "rawId", c.RawID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CommunicationIdentifierModel.
func (c *CommunicationIdentifierModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "communicationUser":
				err = unpopulate(val, "CommunicationUser", &c.CommunicationUser)
				delete(rawMsg, key)
		case "kind":
				err = unpopulate(val, "Kind", &c.Kind)
				delete(rawMsg, key)
		case "microsoftTeamsUser":
				err = unpopulate(val, "MicrosoftTeamsUser", &c.MicrosoftTeamsUser)
				delete(rawMsg, key)
		case "phoneNumber":
				err = unpopulate(val, "PhoneNumber", &c.PhoneNumber)
				delete(rawMsg, key)
		case "rawId":
				err = unpopulate(val, "RawID", &c.RawID)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CommunicationUserIdentifierModel.
func (c CommunicationUserIdentifierModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CommunicationUserIdentifierModel.
func (c *CommunicationUserIdentifierModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
				err = unpopulate(val, "ID", &c.ID)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CreateCallRequest.
func (c CreateCallRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "callbackUri", c.CallbackURI)
	populate(objectMap, "source", c.Source)
	populate(objectMap, "subject", c.Subject)
	populate(objectMap, "targets", c.Targets)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CreateCallRequest.
func (c *CreateCallRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "callbackUri":
				err = unpopulate(val, "CallbackURI", &c.CallbackURI)
				delete(rawMsg, key)
		case "source":
				err = unpopulate(val, "Source", &c.Source)
				delete(rawMsg, key)
		case "subject":
				err = unpopulate(val, "Subject", &c.Subject)
				delete(rawMsg, key)
		case "targets":
				err = unpopulate(val, "Targets", &c.Targets)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type FileSource.
func (f FileSource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "uri", f.URI)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FileSource.
func (f *FileSource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", f, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "uri":
				err = unpopulate(val, "URI", &f.URI)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", f, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GetParticipantsResponse.
func (g GetParticipantsResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", g.NextLink)
	populate(objectMap, "values", g.Values)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GetParticipantsResponse.
func (g *GetParticipantsResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
				err = unpopulate(val, "NextLink", &g.NextLink)
				delete(rawMsg, key)
		case "values":
				err = unpopulate(val, "Values", &g.Values)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MicrosoftTeamsUserIdentifierModel.
func (m MicrosoftTeamsUserIdentifierModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "cloud", m.Cloud)
	populate(objectMap, "isAnonymous", m.IsAnonymous)
	populate(objectMap, "userId", m.UserID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MicrosoftTeamsUserIdentifierModel.
func (m *MicrosoftTeamsUserIdentifierModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "cloud":
				err = unpopulate(val, "Cloud", &m.Cloud)
				delete(rawMsg, key)
		case "isAnonymous":
				err = unpopulate(val, "IsAnonymous", &m.IsAnonymous)
				delete(rawMsg, key)
		case "userId":
				err = unpopulate(val, "UserID", &m.UserID)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ParticipantsUpdatedEvent.
func (p ParticipantsUpdatedEvent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "callConnectionId", p.CallConnectionID)
	populate(objectMap, "correlationId", p.CorrelationID)
	populate(objectMap, "participants", p.Participants)
	populate(objectMap, "serverCallId", p.ServerCallID)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ParticipantsUpdatedEvent.
func (p *ParticipantsUpdatedEvent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "callConnectionId":
				err = unpopulate(val, "CallConnectionID", &p.CallConnectionID)
				delete(rawMsg, key)
		case "correlationId":
				err = unpopulate(val, "CorrelationID", &p.CorrelationID)
				delete(rawMsg, key)
		case "participants":
				err = unpopulate(val, "Participants", &p.Participants)
				delete(rawMsg, key)
		case "serverCallId":
				err = unpopulate(val, "ServerCallID", &p.ServerCallID)
				delete(rawMsg, key)
		case "type":
				err = unpopulate(val, "Type", &p.Type)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PhoneNumberIdentifierModel.
func (p PhoneNumberIdentifierModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PhoneNumberIdentifierModel.
func (p *PhoneNumberIdentifierModel) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "value":
				err = unpopulate(val, "Value", &p.Value)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PlayOptions.
func (p PlayOptions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "loop", p.Loop)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PlayOptions.
func (p *PlayOptions) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "loop":
				err = unpopulate(val, "Loop", &p.Loop)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PlayRequest.
func (p PlayRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "operationContext", p.OperationContext)
	populate(objectMap, "playOptions", p.PlayOptions)
	populate(objectMap, "playSourceInfo", p.PlaySourceInfo)
	populate(objectMap, "playTo", p.PlayTo)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PlayRequest.
func (p *PlayRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "operationContext":
				err = unpopulate(val, "OperationContext", &p.OperationContext)
				delete(rawMsg, key)
		case "playOptions":
				err = unpopulate(val, "PlayOptions", &p.PlayOptions)
				delete(rawMsg, key)
		case "playSourceInfo":
				err = unpopulate(val, "PlaySourceInfo", &p.PlaySourceInfo)
				delete(rawMsg, key)
		case "playTo":
				err = unpopulate(val, "PlayTo", &p.PlayTo)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PlaySource.
func (p PlaySource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "fileSource", p.FileSource)
	populate(objectMap, "playSourceId", p.PlaySourceID)
	populate(objectMap, "sourceType", p.SourceType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PlaySource.
func (p *PlaySource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "fileSource":
				err = unpopulate(val, "FileSource", &p.FileSource)
				delete(rawMsg, key)
		case "playSourceId":
				err = unpopulate(val, "PlaySourceID", &p.PlaySourceID)
				delete(rawMsg, key)
		case "sourceType":
				err = unpopulate(val, "SourceType", &p.SourceType)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RecordingStatusResponse.
func (r RecordingStatusResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "recordingId", r.RecordingID)
	populate(objectMap, "recordingStatus", r.RecordingStatus)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RecordingStatusResponse.
func (r *RecordingStatusResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "recordingId":
				err = unpopulate(val, "RecordingID", &r.RecordingID)
				delete(rawMsg, key)
		case "recordingStatus":
				err = unpopulate(val, "RecordingStatus", &r.RecordingStatus)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RedirectCallRequest.
func (r RedirectCallRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "incomingCallContext", r.IncomingCallContext)
	populate(objectMap, "target", r.Target)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RedirectCallRequest.
func (r *RedirectCallRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "incomingCallContext":
				err = unpopulate(val, "IncomingCallContext", &r.IncomingCallContext)
				delete(rawMsg, key)
		case "target":
				err = unpopulate(val, "Target", &r.Target)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RejectCallRequest.
func (r RejectCallRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "callRejectReason", r.CallRejectReason)
	populate(objectMap, "incomingCallContext", r.IncomingCallContext)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RejectCallRequest.
func (r *RejectCallRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "callRejectReason":
				err = unpopulate(val, "CallRejectReason", &r.CallRejectReason)
				delete(rawMsg, key)
		case "incomingCallContext":
				err = unpopulate(val, "IncomingCallContext", &r.IncomingCallContext)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RemoveParticipantsRequest.
func (r RemoveParticipantsRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "operationContext", r.OperationContext)
	populate(objectMap, "participantsToRemove", r.ParticipantsToRemove)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RemoveParticipantsRequest.
func (r *RemoveParticipantsRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "operationContext":
				err = unpopulate(val, "OperationContext", &r.OperationContext)
				delete(rawMsg, key)
		case "participantsToRemove":
				err = unpopulate(val, "ParticipantsToRemove", &r.ParticipantsToRemove)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RemoveParticipantsResponse.
func (r RemoveParticipantsResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "operationContext", r.OperationContext)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RemoveParticipantsResponse.
func (r *RemoveParticipantsResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "operationContext":
				err = unpopulate(val, "OperationContext", &r.OperationContext)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ResultInformation.
func (r ResultInformation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", r.Code)
	populate(objectMap, "message", r.Message)
	populate(objectMap, "subCode", r.SubCode)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ResultInformation.
func (r *ResultInformation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
				err = unpopulate(val, "Code", &r.Code)
				delete(rawMsg, key)
		case "message":
				err = unpopulate(val, "Message", &r.Message)
				delete(rawMsg, key)
		case "subCode":
				err = unpopulate(val, "SubCode", &r.SubCode)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type StartCallRecordingRequest.
func (s StartCallRecordingRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "callLocator", s.CallLocator)
	populate(objectMap, "recordingChannelType", s.RecordingChannelType)
	populate(objectMap, "recordingContentType", s.RecordingContentType)
	populate(objectMap, "recordingFormatType", s.RecordingFormatType)
	populate(objectMap, "recordingStateCallbackUri", s.RecordingStateCallbackURI)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StartCallRecordingRequest.
func (s *StartCallRecordingRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "callLocator":
				err = unpopulate(val, "CallLocator", &s.CallLocator)
				delete(rawMsg, key)
		case "recordingChannelType":
				err = unpopulate(val, "RecordingChannelType", &s.RecordingChannelType)
				delete(rawMsg, key)
		case "recordingContentType":
				err = unpopulate(val, "RecordingContentType", &s.RecordingContentType)
				delete(rawMsg, key)
		case "recordingFormatType":
				err = unpopulate(val, "RecordingFormatType", &s.RecordingFormatType)
				delete(rawMsg, key)
		case "recordingStateCallbackUri":
				err = unpopulate(val, "RecordingStateCallbackURI", &s.RecordingStateCallbackURI)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TransferCallResponse.
func (t TransferCallResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "operationContext", t.OperationContext)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TransferCallResponse.
func (t *TransferCallResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "operationContext":
				err = unpopulate(val, "OperationContext", &t.OperationContext)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TransferToParticipantRequest.
func (t TransferToParticipantRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "operationContext", t.OperationContext)
	populate(objectMap, "targetParticipant", t.TargetParticipant)
	populate(objectMap, "transfereeCallerId", t.TransfereeCallerID)
	populate(objectMap, "userToUserInformation", t.UserToUserInformation)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TransferToParticipantRequest.
func (t *TransferToParticipantRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "operationContext":
				err = unpopulate(val, "OperationContext", &t.OperationContext)
				delete(rawMsg, key)
		case "targetParticipant":
				err = unpopulate(val, "TargetParticipant", &t.TargetParticipant)
				delete(rawMsg, key)
		case "transfereeCallerId":
				err = unpopulate(val, "TransfereeCallerID", &t.TransfereeCallerID)
				delete(rawMsg, key)
		case "userToUserInformation":
				err = unpopulate(val, "UserToUserInformation", &t.UserToUserInformation)
				delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v interface{}) error {
	if data == nil {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}

